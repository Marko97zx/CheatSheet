

JAVASCRIP

-ARRAY 
CICLO 
for (let i = 0; i < array.length; i++) {
    console.log(array[i]);
}


// Aggiungere un elemento all'array
let array = [1, 2, 3];
array.push(4);

// Cancellare un elemento dall'array
let indice = array.indexOf(2);
if (indice !== -1) {
    array.splice(indice, 1);
}

// Controllare se un elemento è presente nell'array
let elemento = 3;
let presente = array.includes(elemento);

// Prendere un elemento dall'array
let elementoPreso = array[0];

-LIST 
CICLO 

// Aggiungere un elemento alla lista
let lista = [1, 2, 3];
lista.push(4);

// Cancellare un elemento dalla lista
let indice = lista.indexOf(2);
if (indice !== -1) {
    lista.splice(indice, 1);
}

// Controllare se un elemento è presente nella lista
let elemento = 3;
let presente = lista.includes(elemento);

// Prendere un elemento dalla lista
let elementoPreso = lista[0];

-DICTIONARY 
CICLO 
for (let [chiave, valore] of dizionario) {
    console.log(chiave, valore);
}

// Aggiungere un elemento al dizionario
let dizionario = {chiave1: "valore1", chiave2: "valore2"};
dizionario.nuovaChiave = "nuovoValore";

// Cancellare un elemento dal dizionario
delete dizionario.chiave1;

// Controllare se una chiave è presente nel dizionario
let chiave = "chiave2";
let presente = chiave in dizionario;

// Prendere un valore dal dizionario
let valorePreso = dizionario.chiave2;

-HASHSET 
CICLO 
for (let elemento of hashSet) {
    console.log(elemento);
}


// Implementazione di HashSet
let hashSet = {};
hashSet.elemento1 = true;

// Aggiungere un elemento all'HashSet
hashSet.elemento2 = true;

// Controllare se un elemento è presente nell'HashSet
let elemento = "elemento1";
let presente = hashSet[elemento] !== undefined;

// Cancellare un elemento dall'HashSet
delete hashSet.elemento1;

-QUEUE
CICLO 
for (let elemento of coda) {
    console.log(elemento);
}

// Implementazione di una coda usando un array
let coda = [];

// Aggiungere un elemento alla coda
coda.push(1);

// Cancellare un elemento dalla coda
let elementoRimosso = coda.shift();

// Controllare se la coda è vuota
let vuota = coda.length === 0;

-STACK 
CICLO 
for (let elemento of stack) {
    console.log(elemento);
}

// Implementazione di uno stack usando un array
let stack = [];

// Aggiungere un elemento allo stack
stack.push(1);

// Cancellare un elemento dallo stack
let elementoRimosso = stack.pop();

// Controllare se lo stack è vuoto
let vuoto = stack.length === 0;

-LINKEDLIST 
// Implementazione di una lista collegata usando oggetti
class Nodo {
    constructor(valore) {
        this.valore = valore;
        this.successivo = null;
    }
}

class LinkedList {
    constructor() {
        this.testa = null;
    }

    // Aggiungere un elemento alla lista collegata
    aggiungiElemento(valore) {
        let nuovoNodo = new Nodo(valore);
        if (this.testa === null) {
            this.testa = nuovoNodo;
        } else {
            let corrente = this.testa;
            while (corrente.successivo !== null) {
                corrente = corrente.successivo;
            }
            corrente.successivo = nuovoNodo;
        }
    }

    // Cancellare un elemento dalla lista collegata
    rimuoviElemento(valore) {
        if (this.testa === null) {
            return;
        }
        if (this.testa.valore === valore) {
            this.testa = this.testa.successivo;
            return;
        }
        let corrente = this.testa;
        while (corrente.successivo !== null && corrente.successivo.valore !== valore) {
            corrente = corrente.successivo;
        }
        if (corrente.successivo !== null) {
            corrente.successivo = corrente.successivo.successivo;
        }
    }

    // Controllare se un elemento è presente nella lista collegata
    cercaElemento(valore) {
        let corrente = this.testa;
        while (corrente !== null) {
            if (corrente.valore === valore) {
                return true;
            }
            corrente = corrente.successivo;
        }
        return false;
    }
}

